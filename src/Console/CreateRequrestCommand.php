<?php
/**
 * User: babybus zhili
 * Date: 2019-06-21 15:06
 * Email: <zealiemai@gmail.com>
 */

namespace SwiftApi\Console;

use Illuminate\Console\GeneratorCommand;

class CreateRequrestCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $signature = 'swift-api:create-request {name} {--fields=*} 
';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a swift-api form request class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Request';

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return __DIR__ . '/stubs/request.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param string $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return config('api.request.namespace');
    }

    protected function getNameInput()
    {
        return str_replace('/', '\\', trim($this->argument('name')));
    }

    public function handle()
    {
        return parent::handle(); // TODO: Change the autogenerated stub
    }

    public  $db_types_map = [
        'string'=>'string',
        'integer'=>'integer',
        'text'=>'string',
        'float'=>'numeric',
        'double'=>'numeric',
        'decimal'=>'numeric',
        'boolean'=>'boolean',
        'date'=>'date',
        'time'=>'string',
        'datetime'=>'date',
        'timestamp'=>'integer',
        'char'=>'string',
        'mediumText'=>'string',
        'longText'=>'string',
        'tinyInteger'=>'integer',
        'smallInteger'=>'integer',
        'mediumInteger'=>'integer',
        'bigInteger'=>'integer',
        'unsignedTinyInteger'=>'integer',
        'unsignedSmallInteger'=>'integer',
        'unsignedMediumInteger'=>'integer',
        'unsignedInteger'=>'integer',
        'unsignedBigInteger'=>'integer',
        'enum'=>'array',
        'json'=>'json',
        'jsonb'=>'string',
        'dateTimeTz'=>'string',
        'timeTz'=>'string',
        'timestampTz'=>'string',
        'nullableTimestamps'=>'integer',
        'binary'=>'string',
        'ipAddress'=>'ip',
        'macAddress'=>'string'
    ];

    protected function replaceClass($stub, $name)
    {
        $stub = parent::replaceClass($stub, $name);

        $fields = $this->option('fields');
        $rows = [];
        foreach ($fields as $field) {
            $field = json_decode($field, true);
            $rules = [];
            $rules[] = $this->db_types_map[$field['type']];

            if (array_get($field, 'nullable') != true) {
                $rules[] = 'required';
            }
            if (isset($field['length']) && $field['length']) {
                $rules[] = "max:{$field['length']}";
            }
            $rules = json_encode($rules);
            $rows[] = "\"{$field['name']}\" => {$rules},\n";
        };
        return str_replace('DummyRules', trim(implode(str_repeat(' ', 12), $rows), "\n"), $stub);
    }
}
